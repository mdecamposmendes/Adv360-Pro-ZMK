/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#define HOST_OS 1
#include "./zmk-nodefree-config/helper.h"
#include "./zmk-nodefree-config/international_chars/german.dtsi"
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define LEFT_HAND_KEYS 0 1 2 3 4 5 6 \
                  14 15 16 17 18 19 20 \
                  28 29 30 31 32 33 34 \
                  46 47 48 49 50 51 \
                  66 67 68 69 70
#define RIGHT_HAND_KEYS 7 8 9 10 11 12 13 \
                   21 22 23 24 25 26 27 \
                   39 40 41 42 43 44 45 \
                   60 61 62 63 64 65 \
                   77 78 79 80 81
#define THUMB_KEYS 35 36 54 71 72 73 37 38 57 74 75 76
#define THUMBS THUMBS_LEFT THUMBS_RIGHT

/ {
    behaviors {
        #include "macros.dtsi"
        #include "version.dtsi"

        #ifndef HOMEY_HOLDING_TYPE
        #define HOMEY_HOLDING_TYPE "tap-preferred"
        #endif

        #ifndef HOMEY_HOLDING_TIME
        #define HOMEY_HOLDING_TIME 270 // TAPPING_TERM + ALLOW_CROSSOVER_AFTER
        #endif

        #ifndef HOMEY_STREAK_DECAY
        #define HOMEY_STREAK_DECAY 230
        #endif

        #ifndef SHIFT_HOLDING_TYPE
        #define SHIFT_HOLDING_TYPE "tap-preferred"
        #endif

        #ifndef SHIFT_HOLDING_TIME
        #define SHIFT_HOLDING_TIME 170
        #endif

        #ifndef SHIFT_STREAK_DECAY
        #define SHIFT_STREAK_DECAY 130
        #endif

        #ifndef PLAIN_HOLDING_TYPE
        #define PLAIN_HOLDING_TYPE "tap-preferred"
        #endif

        #ifndef PLAIN_HOLDING_TIME
        #define PLAIN_HOLDING_TIME 170
        #endif

        #ifndef PLAIN_STREAK_DECAY
        #define PLAIN_STREAK_DECAY 130
        #endif

        #ifndef THUMB_HOLDING_TYPE
        #define THUMB_HOLDING_TYPE "balanced"
        #endif

        #ifndef THUMB_HOLDING_TIME
        #define THUMB_HOLDING_TIME 200
        #endif

        #ifndef SPACE_HOLDING_TYPE
        #define SPACE_HOLDING_TYPE "balanced"
        #endif

        #ifndef SPACE_HOLDING_TIME
        #define SPACE_HOLDING_TIME 200
        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        //
        // Home row mod-tap keys for all except index fingers
        //

        homey_left: home_row_mods_left_hand {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_LEFT_HAND";
            flavor =
            HOMEY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOMEY_HOLDING_TIME>;
            require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        homey_right: home_row_mods_right_hand {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_RIGHT_HAND";
            flavor =
            HOMEY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOMEY_HOLDING_TIME>;
            require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        //
        // Special home row mod-tap keys for the index fingers
        //

        shift_left: home_row_shift_left_hand {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_SHIFT_LEFT_HAND";
            flavor =
            SHIFT_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;

            //hold-trigger-on-release; // don't wait for other mods

            tapping-term-ms = <SHIFT_HOLDING_TIME>;
            require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        shift_right: home_row_shift_right_hand {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_SHIFT_RIGHT_HAND";
            flavor =
            SHIFT_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;

            //hold-trigger-on-release; // don't wait for other mods

            tapping-term-ms = <SHIFT_HOLDING_TIME>;
            require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        plain: plain_typing_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "PLAIN_TYPING_LAYER";
            flavor =
            PLAIN_HOLDING_TYPE;
            tapping-term-ms = <PLAIN_HOLDING_TIME>;
            require-prior-idle-ms = <PLAIN_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };

        //
        // Thumb cluster hold-tap keys for Miryoku layers
        //

        thumb: thumb_layer_access {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_LAYER_ACCESS";
            flavor =
            THUMB_HOLDING_TYPE;
            tapping-term-ms = <THUMB_HOLDING_TIME>;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };

        space: thumb_layer_access_spacebar {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_LAYER_ACCESS_SPACEBAR";
            flavor =
            SPACE_HOLDING_TYPE;
            tapping-term-ms = <SPACE_HOLDING_TIME>;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none    &kp N1                  &kp N2                  &kp N3               &kp N4                    &kp N5   &tog 1                                                                                          &mo 3  &kp N6   &kp N7                     &kp N8                &kp N9                    &kp N0                            &none
&none    &kp Q                   &kp W                   &kp E                &kp R                     &kp T    &none                                                                                           &none  &kp Y    &kp U                      &kp I                 &kp O                     &kp P                             &none
&kp ESC  &homey_left LEFT_WIN A  &homey_left LEFT_ALT S  &homey_left LCTRL D  &homey_left LEFT_SHIFT F  &kp G    &none             &kp LCTRL           &kp LALT      &kp LGUI   &kp RCTRL                        &none  &kp H    &homey_right LEFT_SHIFT J  &homey_right RCTRL K  &homey_right RIGHT_ALT L  &homey_right RIGHT_WIN SEMICOLON  &none
&none    &kp Z                   &kp X                   &kp C                &lt 4 V                   &lt 5 B                                        &kp LC(C)     &kp PG_UP                                          &lt 5 N  &lt 4 M                    &kp COMMA             &kp DOT                   &kp FSLH                          &none
&mo 2    &none                   &none                   &kp LEFT             &kp RIGHT                                  &kp BSPC  &hm LEFT_SHIFT TAB  &kp ESCAPE    &kp PG_DN  &mt LEFT_SHIFT ENTER  &kp SPACE                  &kp UP_ARROW               &kp DOWN              &none                     &none                             &mo 2
            >;
        };

        layer_keypad {
            bindings = <
&kp EQUAL  &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &trans                                                                    &mo 3  &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q      &kp W     &kp E     &kp R      &kp T   &none                                                                     &none  &kp Y   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&kp ESC    &kp A      &kp S     &kp D     &kp F      &kp G   &none             &kp LCTRL  &kp LALT    &kp LGUI   &kp RCTRL             &none  &kp H   &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SQT
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B                                &kp HOME    &kp PG_UP                               &kp N   &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 2      &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT                  &kp BSPC  &kp DEL    &kp END     &kp PG_DN  &kp ENTER  &kp KP_N0                 &kp UP      &kp DOWN      &kp KP_DOT     &kp RBKT         &mo 2
            >;
        };

        layer_fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &tog 1                                                    &mo 3  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &none                                                     &none  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none           &trans  &trans    &trans  &trans          &none  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                          &trans    &trans                         &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans    &trans  &trans  &trans                 &trans  &trans  &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                                        &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                                                  &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none               &none  &none    &bt BT_CLR  &none                        &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none                                    &none    &none                                                            &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                                    &none  &none  &none    &none       &bl BL_TOG  &rgb_ug RGB_TOG                                 &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        brackets {
            bindings = <
&trans  &trans     &trans             &trans                &trans                 &trans     &trans                                                    &trans  &trans    &trans         &trans         &trans            &trans  &trans
&trans  &kp UNDER  &kp DOUBLE_QUOTES  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE   &trans                                                    &trans  &trans    &trans         &trans         &trans            &trans  &trans
&trans  &kp MINUS  &kp SINGLE_QUOTE   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SLASH  &trans          &trans  &trans    &trans  &trans          &trans  &kp HASH  &kp COLON      &kp SEMICOLON  &kp DOLLAR        &trans  &trans
&trans  &kp TILDE  &kp GRAVE          &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp EQUAL                          &trans    &trans                          &trans    &kp BACKSLASH  &kp LESS_THAN  &kp GREATER_THAN  &trans  &trans
&trans  &trans     &trans             &trans                &trans                                    &trans  &trans  &trans    &trans  &trans  &trans                    &trans         &trans         &trans            &trans  &trans
            >;
        };

        umlaute {
            bindings = <
&trans  &trans  &trans      &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans      &trans  &trans  &trans  &trans                                                    &trans  &trans  &de_ue  &trans  &de_oe  &trans  &trans
&trans  &de_ae  &de_eszett  &trans  &trans  &trans  &trans          &trans  &trans    &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans      &trans  &trans  &trans                          &trans    &trans                          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans      &trans  &trans                  &trans  &trans  &trans    &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
